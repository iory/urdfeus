name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0, 0,12 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  formatting:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: 3.8
    - name: Install
      run: pip install ruff
    - name: Run Ruff
      run: ruff check .

  tests-3x:
    name: Run Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.9.13, 3.11.7]
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install APT On Linux
      run: |
        sudo apt-get update -qq -y
        sudo apt-get install -qq -y libspatialindex-dev freeglut3-dev libsuitesparse-dev libblas-dev liblapack-dev
    - name: Install Pytest
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install Cython
        pip install pytest hacking
    - name: Install urdfeus
      run: pip install --no-cache-dir .[all]
    - name: Run Pytest
      run: pytest -v tests

  auto-merge:
    needs: [formatting, tests-3x]
    if: contains(github.event.pull_request.labels.*.name, 'auto-merge-ok')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Auto merge PR with auto-merge-ok label
        if: success()
        uses: pascalgn/automerge-action@v0.16.3
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: "auto-merge-ok"
          MERGE_METHOD: squash
          MERGE_DELETE_BRANCH: true

  tag-release:
    runs-on: ubuntu-latest
    needs: auto-merge
    if: contains(github.event.pull_request.labels.*.name, 'release')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install APT On Linux
        run: |
          sudo apt-get update -qq -y
          sudo apt-get install -qq -y libspatialindex-dev freeglut3-dev libsuitesparse-dev libblas-dev liblapack-dev
          sudo apt-get install -qq -y xvfb # for headless testing

      - name: Install package
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install .[all]

      - name: Get version from package
        id: get_version
        run: |
          VERSION=$(python -c "import urdfeus; print(urdfeus.__version__)")
          echo "Detected version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Tag and push release
        run: |
          git tag "v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

  pypi:
    name: Release To PyPi
    needs: tag-release
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install publishing dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel
    - name: Build
      run: |
        python setup.py sdist
        python setup.py bdist_wheel
    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.PYPI_TOKEN }}
